name: Pixel Vision 8

on:
  push:
    branches: 'v**'

jobs:

  # This runs before the builds and cretes the new feature release
  create-release:

    name: "Create Release"
    runs-on: "ubuntu-latest"

    # Steps for the task
    steps:

      # Figure out what the next tag should be
      - id: compute_tag
        uses: craig-day/compute-tag@v10
        with:
          github_token: ${{ github.token }}
          version_scheme: semantic
          version_type: patch

      # Create the new release tag based on the above tag value and pass in the generated change log
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.compute_tag.outputs.next_tag }}
          release_name: Pixel Vision 8 ${{ steps.compute_tag.outputs.next_tag }} Preview
          draft: false
          prerelease: true

  changelogger:
    runs-on: ubuntu-latest
    needs: create-release

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Unshallow
        run: git fetch --prune --unshallow

      - name: Find Current Tag
        id: current
        uses: jimschubert/query-tag-action@v1
        with:
          include: 'v*'
          exclude: '*-rc*'
          commit-ish: '@'
          skip-unshallow: 'true'

      - name: save Changelog
        id: last_version
        run: |
          IFS='.' read -ra my_array <<< "${{steps.current.outputs.tag}}"
          prevVer=${my_array[0]}.${my_array[1]}.$((${my_array[2]} - 1))
          echo "::set-env name=LAST::$prevVer"

      - name: Create Changelog
        id: changelog
        uses: jimschubert/beast-changelog-action@v1
        with:
          FROM: ${{ env.LAST }}
          TO: ${{steps.current.outputs.tag}}

      - name: View Changelog
        run: cat .github/CHANGELOG.md

      - name: save Changelog
        id: log
        run: |
          REPORT="$(cat .github/CHANGELOG.md)"
          REPORT="${REPORT//'%'/'%25'}"
          REPORT="${REPORT//$'\n'/'%0A'}"
          REPORT="${REPORT//$'\r'/'%0D'}"
          echo "::set-env name=REPORT::$REPORT"

      # Update the release with the change log
      - name: Update Release
        id: update_release
        uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          allow_override: true
          tag: ${{steps.current.outputs.tag}}
          body: >
            You'll be able to download a preview build of Pixel Vision 8 for Windows, Mac, and Linux (x64 & ARM 64) below. This project is continually updated, and automated builds are made available to allow users to preview new features, bug fixes, and optimizations to the underlying codebase. Please make sure to backup your [Workspace](https://docs.pixelvision8.com/pixelvisionos) before running this or any new build of Pixel Vision 8.


            Due to how large and complex the codebase is, these incremental builds help reduce the time between releases and allow the collection developer feedback. Here is a list of the most recent changes:


            ${{ env.REPORT }}. In addition, you can see the current open issues [here](https://github.com/PixelVision8/PixelVision8/issues) or use one of the following links to submit a new [bug](https://github.com/PixelVision8/PixelVision8/issues/new?assignees=jessefreeman&labels=bug&template=bug_report.md), [feature](https://github.com/PixelVision8/PixelVision8/issues/new?assignees=jessefreeman&labels=bug&template=feature_request.md) or [question](https://github.com/PixelVision8/PixelVision8/issues/new?assignees=jessefreeman&labels=bug&template=question.md). To learn more about Pixel Vision 8, check out [the documentation](https://docs.pixelvision8.com/), explore [the examples](https://www.pixelvision8.com/examples), join [the Discord server](https://discord.gg/pixelvision8), and visit [the main website](https://www.pixelvision8.com/).

  # This job creates a build for each OS and uploaded it to the previously created tag
  tagged-release:

    # We delay this job from running until the new feature tag as been created
    needs: create-release
    name: "Tagged Release"
    runs-on: macos-latest

    # We are going to do builds for Windows, Mac, and Linux(x64/arm64)
    strategy:
      matrix:
        configuration: [win-x64, osx-x64, linux-x64, linux-arm64]

    steps:

      # Checkout the code
      - uses: actions/checkout@v2

      - run: |
          git fetch --tags

      # Figure out the last tag that was created  in the initial job
      - id: compute_tag
        uses: craig-day/compute-tag@v10
        with:
          github_token: ${{ github.token }}
          version_scheme: semantic
          version_type: patch

      # Setup dotnet v3.1
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.301

      # Install the project's dependencies
      - name: Install dependencies
        run: dotnet restore

      # Use the command line to publish te project, delete the .pdb file, change permissions, and create a new tar file (to preserve file permissions on Mac and Linux)
      - name: Publish
        run: |
          sed -i "" 's/v0.0.0/${{ steps.compute_tag.outputs.previous_tag }}/g' Content/bios.json
          dotnet publish -o Builds/${{ matrix.configuration }} -c Release -r ${{ matrix.configuration }} --self-contained true -p:PublishSingleFile=true
          cd Builds/${{ matrix.configuration }}/
          rm *.pdb
          chmod 775 ./*
          zip ../../pv8.zip ./*

      # Convert the tag into a URI we can use to upload the final files to
      - name: Get last uri
        id: last_uri
        uses: pdamianik/release-tag-to-upload-url-action@v1.0.1
        with:
          tag: ${{ steps.compute_tag.outputs.previous_tag }}
          token: ${{ github.token }}

      # Upload the final file to the release tag
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.last_uri.outputs.uploadUrl }}
          asset_path: pv8.zip
          asset_name: Pixel-Vision-8-${{ steps.compute_tag.outputs.previous_tag }} ${{ matrix.configuration }}.zip
          asset_content_type: application/zip
